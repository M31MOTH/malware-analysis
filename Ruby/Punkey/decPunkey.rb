#!/usr/bin/env ruby
require 'openssl'
require 'base64'

# Copyright
# =========
# Copyright (C) 2015 Trustwave Holdings, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>
#
#
# decPunkey.rb by Eric Merritt 2015-04-09
#
# =Synopsis
#
# This is a simple Ruby script that decrypts traffic encrypted
# by Punkey.  The encryption is AES-128-cbc and used embedded
# keys to encrypt exfiltration traffic.  Both keylogger and
# card holder data are encrypted by this method.
#
# Input: Base64 encoded string
#
# Note: be sure it is URL decoded
#
# Example: ruby decPunkey.rb -f file_containing_base64_string(s).txt
#
# Example: ruby decPunkey.rb -b "base64 encoded string"
#

# Extend functions taken from Eric Monti's rbkb
# https://github.com/emonti/rbkb
class String
  def unhexify(d=/\s*/)
    self.strip.gsub(/([A-Fa-f0-9]{1,2})#{d}?/) { $1.hex.chr }
  end
end

def decrypt_data(encrypted_data, key, iv, cipher_type)
  aes = OpenSSL::Cipher::Cipher.new(cipher_type)
  aes.decrypt
  aes.key = key
  aes.iv = iv if iv != nil
  aes.update(encrypted_data) + aes.final
end

def usage
  puts "Usage: ruby #{__FILE__} (-f|-b) (file|base64)"
  exit 1
end

key = 'f4150d4a1ac5708c29e437749045a39a'.unhexify()
iv = '86afc43868fea6abd40fbf6d5ed50905'.unhexify()
mode = 'aes-128-cbc'

usage unless (opt = ARGV.shift)
usage unless (opt.downcase=='-f' or opt.downcase=='-b')

if (opt == '-f')
  usage unless (file = ARGV.shift)
  f = File.read(file)
  puts decrypt_data(Base64.decode64(f), key, iv, mode)
elsif (opt == '-b')
  usage unless (data = ARGV.shift)
  puts decrypt_data(Base64.decode64(data), key, iv, mode)
end
